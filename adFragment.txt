package yellowtbs.tracking.bustracking.Fragment;

import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.support.v4.app.Fragment;
import android.support.v7.widget.DefaultItemAnimator;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ProgressBar;

import com.android.volley.VolleyError;
import com.bumptech.glide.DrawableRequestBuilder;
import com.bumptech.glide.Glide;
import com.github.yasevich.endlessrecyclerview.EndlessRecyclerView;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.reflect.TypeToken;
import com.yalantis.phoenix.PullToRefreshView;

import org.json.JSONArray;

import java.lang.reflect.Type;
import java.util.LinkedList;

import yellowtbs.tracking.bustracking.Activity.AdDetailsActivity;
import yellowtbs.tracking.bustracking.Adapter.AdRecyclerAdapter;
import yellowtbs.tracking.bustracking.HTTP.APIHelper;
import yellowtbs.tracking.bustracking.HTTP.DataModels.Ad;
import yellowtbs.tracking.bustracking.R;
import yellowtbs.tracking.bustracking.Utils.Volley.VolleyArrayCallback;
import yellowtbs.tracking.bustracking.Utils.Volley.VolleyHelper;

public class AdFragment extends Fragment implements EndlessRecyclerView.Pager {

//    private RecyclerView list;
    private EndlessRecyclerView list;

    private ViewGroup rootView;
    private Context context;

    DrawableRequestBuilder<Ad> drawableRequestBuilder;

    Gson gson;
    Type listType;
    LinkedList<yellowtbs.tracking.bustracking.HTTP.DataModels.Ad> newList;
    private AdRecyclerAdapter adapterAd;
    private PullToRefreshView mPullToRefreshView;

    private static final long DELAY = 1000L;
    private static final int ITEMS_ON_PAGE = 5;
    private static final int TOTAL_PAGES = 100;
    private final Handler handler = new Handler();

    private boolean loading = false;
    int pageNumber = 1;

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        rootView = (ViewGroup) inflater.inflate(R.layout.fragment_recycler_view_ad, container, false);

        mPullToRefreshView = (PullToRefreshView) rootView.findViewById(R.id.pull_to_refresh);

        //gson Configuration
        gson = new GsonBuilder().create();
        listType = new TypeToken<LinkedList<yellowtbs.tracking.bustracking.HTTP.DataModels.Ad>>(){}.getType();
        newList = new LinkedList<Ad>();

        drawableRequestBuilder = Glide
                .with(this)
                .from(Ad.class);

        adapterAd = new AdRecyclerAdapter(drawableRequestBuilder,new LinkedList<yellowtbs.tracking.bustracking.HTTP.DataModels.Ad>(),getActivity());

        LoadData();
        //LoadDataMore(2);

        list = (EndlessRecyclerView) rootView.findViewById(R.id.recycler_view);
//        list = (RecyclerView) rootView.findViewById(R.id.recycler_view);
//        list.setHasFixedSize(true);
//        list.setEnabled(true);

        RecyclerView.LayoutManager mLayoutManager = new LinearLayoutManager(getContext());
        list.setLayoutManager(mLayoutManager);
        list.setItemAnimator(new DefaultItemAnimator());

        list.setProgressView(R.layout.item_progress);
        list.setHasFixedSize(true);
        list.setAdapter(adapterAd);
        list.setPager(AdFragment.this);
        list.setEnabled(true);

        //Deghat Kon ;)
//        list = (RecyclerView) rootView.findViewById(R.id.recycler_view);

       // adapterAd = new AdvertisementAdapter(getActivity(), getContext(), advertisementList);


        list.setAdapter(adapterAd);

        mPullToRefreshView.setOnRefreshListener(new PullToRefreshView.OnRefreshListener() {
            @Override
            public void onRefresh() {
                mPullToRefreshView.postDelayed(new Runnable() {
                    @Override
                    public void run() {
                        mPullToRefreshView.setRefreshing(false);
                        LoadData();
                    }
                }, 1000);
            }
        });

        return rootView;
    }

    private void LoadData(){
        VolleyHelper.Get(APIHelper.getInstance().getAds + "/1/" + ITEMS_ON_PAGE, new VolleyArrayCallback() {
            @Override
            public void onSuccess(JSONArray response) {
                newList = gson.fromJson(response.toString(), listType);
                prepareRecyclerView();
            }
            @Override
            public void onError(VolleyError error) {

            }
        });
    }

    private void LoadDataMore(int pageNumber){
        VolleyHelper.Get(APIHelper.getInstance().getAds + pageNumber +"/" + ITEMS_ON_PAGE, new VolleyArrayCallback() {
            @Override
            public void onSuccess(JSONArray response) {
                newList.addAll((LinkedList<yellowtbs.tracking.bustracking.HTTP.DataModels.Ad>)gson.fromJson(response.toString(), listType));
            }
            @Override
            public void onError(VolleyError error) {

            }
        });
    }

    private void prepareRecyclerView(){
        adapterAd.setAds(newList);
        adapterAd.notifyDataSetChanged();

        //Setup Click
        adapterAd.setShareClickListener(new AdRecyclerAdapter.OnItemClickListener() {
            @Override
            public void onItemClick(View view, int position) {
//                Intent intent = new Intent(getActivity(), AdDetailsActivity.class);
//                intent.putExtra("adID", newList.get(position).AdID);
//                getContext().startActivity(intent);
                Log.d("item clicked", "item+" + position);
            }
        });

        list.setAdapter(adapterAd);
    }

    @Override
    public boolean shouldLoad() {
        return !loading && adapterAd.getItemCount() / ITEMS_ON_PAGE < TOTAL_PAGES;
    }

    @Override
    public void loadNextPage() {
        Log.d("Load More","Love love");
        loading = true;
        pageNumber +=1;
        VolleyHelper.Get(APIHelper.getInstance().getAds + pageNumber +"/" + ITEMS_ON_PAGE, new VolleyArrayCallback() {
            @Override
            public void onSuccess(JSONArray response) {
                newList.addAll((LinkedList<yellowtbs.tracking.bustracking.HTTP.DataModels.Ad>)gson.fromJson(response.toString(), listType));

//                getActivity().runOnUiThread(new Runnable() {
//                    @Override
//                    public void run() {
//                    }
//                });

                handler.post(new Runnable() {
                    @Override
                    public void run() {
                        // Notify adapter with appropriate notify methods
                        list.setRefreshing(false);
                        loading = false;
                        adapterAd.addAds(newList);
                        Log.d("Load More","End End");
                    }
                });

                handler.postDelayed(new Runnable() {
                    @Override
                    public void run() {

                    }
                }, DELAY);
            }
            @Override
            public void onError(VolleyError error) {

            }
        });

    }
}
